{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport Axios from \"axios\";\nexport const getCatalogs = createAsyncThunk(\"catalog/getCatalogs\", async (dispatch, getState) => {\n  const {\n    data\n  } = await Axios.get(\"api/CatalogApi/getcatalogs\");\n  console.log(data['catagories']);\n  return data['Categories'];\n});\nconst catalogInitialState = {\n  catagories: [],\n  isLoading: false,\n  error: undefined\n};\n\nfunction startLoading(state) {\n  state.isLoading = true;\n}\n\nconst catalogsSlice = createSlice({\n  name: 'catalog',\n  initialState: catalogInitialState,\n  reducers: {// standard reducer logic, with auto-generated action types per reducer\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(getCatalogs.fulfilled, (state, action) => {\n      // Add user to the state array\n      // state.isLoading = false\n      state.catagories = action.payload;\n      state.isLoading = true; //state.catagories = new string[2]{'dsdsd','sdsdsd'};\n    }).addCase(getCatalogs.pending, state => {\n      startLoading(state);\n    }).addCase(getCatalogs.rejected, (state, action) => {\n      state.error = action.error.message; //loadingFailed(state, action)\n    });\n  }\n});\nexport default catalogsSlice.reducer;","map":{"version":3,"sources":["C:/MyProgram/working/ShopCart/Project/my-app/src/slice/catalogSlice.ts"],"names":["createSlice","createAsyncThunk","Axios","getCatalogs","dispatch","getState","data","get","console","log","catalogInitialState","catagories","isLoading","error","undefined","startLoading","state","catalogsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","action","payload","pending","rejected","message","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CACvC,qBADuC,EAEvC,OAAOG,QAAP,EAAiBC,QAAjB,KAA8B;AAC1B,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMJ,KAAK,CAACK,GAAN,CAAU,4BAAV,CAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAAC,YAAD,CAAhB;AACF,SAAOA,IAAI,CAAC,YAAD,CAAX;AACD,CANsC,CAApC;AAeP,MAAMI,mBAAiC,GAAG;AACxCC,EAAAA,UAAU,EAAE,EAD4B;AAExCC,EAAAA,SAAS,EAAE,KAF6B;AAGxCC,EAAAA,KAAK,EAAEC;AAHiC,CAA1C;;AAMA,SAASC,YAAT,CAAsBC,KAAtB,EAA2C;AACzCA,EAAAA,KAAK,CAACJ,SAAN,GAAkB,IAAlB;AACD;;AAID,MAAMK,aAAa,GAAGjB,WAAW,CAAC;AAChCkB,EAAAA,IAAI,EAAE,SAD0B;AAEhCC,EAAAA,YAAY,EAAET,mBAFkB;AAGhCU,EAAAA,QAAQ,EAAE,CACR;AADQ,GAHsB;AAMhCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,WAAW,CAACqB,SAA5B,EAAuC,CAACR,KAAD,EAAQS,MAAR,KAAmB;AACxD;AACA;AACAT,MAAAA,KAAK,CAACL,UAAN,GAAmBc,MAAM,CAACC,OAA1B;AACAV,MAAAA,KAAK,CAACJ,SAAN,GAAkB,IAAlB,CAJwD,CAKxD;AACD,KAND,EAQCW,OARD,CAQSpB,WAAW,CAACwB,OARrB,EAQ+BX,KAAD,IAAW;AACvCD,MAAAA,YAAY,CAACC,KAAD,CAAZ;AAGD,KAZD,EAaCO,OAbD,CAaSpB,WAAW,CAACyB,QAbrB,EAa+B,CAACZ,KAAD,EAAQS,MAAR,KAAmB;AAChDT,MAAAA,KAAK,CAACH,KAAN,GAAcY,MAAM,CAACZ,KAAP,CAAagB,OAA3B,CADgD,CAEhD;AACD,KAhBD;AAiBD;AAzB+B,CAAD,CAAjC;AAgCE,eAAeZ,aAAa,CAACa,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport Axios from \"axios\";\r\nimport { ICatagory } from \"../api/interface/iCatalog\";\r\n\r\nexport const getCatalogs = createAsyncThunk(\r\n    \"catalog/getCatalogs\",\r\n    async (dispatch, getState) => {\r\n        const { data } = await Axios.get(\"api/CatalogApi/getcatalogs\");\r\n        console.log(data['catagories'])\r\n      return data['Categories']\r\n    }\r\n);\r\n\r\ninterface CatalogState {    \r\n  catagories: ICatagory[]   \r\n  isLoading: boolean\r\n  error:  string|undefined\r\n}\r\n\r\nconst catalogInitialState: CatalogState = {    \r\n  catagories: [],    \r\n  isLoading: false,\r\n  error: undefined\r\n}\r\n\r\nfunction startLoading(state: CatalogState) {\r\n  state.isLoading = true\r\n}\r\n\r\n\r\n\r\nconst catalogsSlice = createSlice({\r\n  name: 'catalog',\r\n  initialState: catalogInitialState,\r\n  reducers: {\r\n    // standard reducer logic, with auto-generated action types per reducer\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Add reducers for additional action types here, and handle loading state as needed\r\n    builder.addCase(getCatalogs.fulfilled, (state, action) => {\r\n      // Add user to the state array\r\n      // state.isLoading = false\r\n      state.catagories = action.payload\r\n      state.isLoading = true\r\n      //state.catagories = new string[2]{'dsdsd','sdsdsd'};\r\n    })\r\n    \r\n    .addCase(getCatalogs.pending, (state) => {\r\n      startLoading(state)\r\n      \r\n    \r\n    })\r\n    .addCase(getCatalogs.rejected, (state, action) => {\r\n      state.error = action.error.message\r\n      //loadingFailed(state, action)\r\n    })\r\n  },\r\n})\r\n  \r\n \r\n  \r\n \r\n  \r\n  export default catalogsSlice.reducer;"]},"metadata":{},"sourceType":"module"}