{"ast":null,"code":"import _regeneratorRuntime from\"C:/MyProgram/working/ShopCart/Project/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/MyProgram/working/ShopCart/Project/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{createSlice,createAsyncThunk}from\"@reduxjs/toolkit\";import Axios from\"axios\";export var getCatalogs=createAsyncThunk(\"catalog/getCatalogs\",/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var _yield$Axios$get,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Axios.get(\"api/CatalogApi\");case 2:_yield$Axios$get=_context.sent;data=_yield$Axios$get.data;console.log(data['catagories']);return _context.abrupt(\"return\",data['Categories']);case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}());var catalogInitialState={catagories:[],isLoading:false,error:undefined};function startLoading(state){state.isLoading=true;}var catalogsSlice=createSlice({name:'catalog',initialState:catalogInitialState,reducers:{// standard reducer logic, with auto-generated action types per reducer\n},extraReducers:function extraReducers(builder){// Add reducers for additional action types here, and handle loading state as needed\nbuilder.addCase(getCatalogs.fulfilled,function(state,action){// Add user to the state array\n// state.isLoading = false\nstate.catagories=action.payload;state.isLoading=true;//state.catagories = new string[2]{'dsdsd','sdsdsd'};\n}).addCase(getCatalogs.pending,function(state){startLoading(state);}).addCase(getCatalogs.rejected,function(state,action){state.error=action.error.message;//loadingFailed(state, action)\n});}});export default catalogsSlice.reducer;","map":{"version":3,"sources":["C:/MyProgram/working/ShopCart/Project/my-app/src/slice/catalogSlice.ts"],"names":["createSlice","createAsyncThunk","Axios","getCatalogs","dispatch","getState","get","data","console","log","catalogInitialState","catagories","isLoading","error","undefined","startLoading","state","catalogsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","action","payload","pending","rejected","message","reducer"],"mappings":"mUAAA,OAASA,WAAT,CAAsBC,gBAAtB,KAA8C,kBAA9C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAGA,MAAO,IAAMC,CAAAA,WAAW,CAAGF,gBAAgB,CACvC,qBADuC,0FAEvC,iBAAOG,QAAP,CAAiBC,QAAjB,kKAC2BH,CAAAA,KAAK,CAACI,GAAN,CAAU,gBAAV,CAD3B,uCACYC,IADZ,kBACYA,IADZ,CAEIC,OAAO,CAACC,GAAR,CAAYF,IAAI,CAAC,YAAD,CAAhB,EAFJ,gCAGSA,IAAI,CAAC,YAAD,CAHb,wDAFuC,mEAApC,CAeP,GAAMG,CAAAA,mBAAiC,CAAG,CACxCC,UAAU,CAAE,EAD4B,CAExCC,SAAS,CAAE,KAF6B,CAGxCC,KAAK,CAAEC,SAHiC,CAA1C,CAMA,QAASC,CAAAA,YAAT,CAAsBC,KAAtB,CAA2C,CACzCA,KAAK,CAACJ,SAAN,CAAkB,IAAlB,CACD,CAID,GAAMK,CAAAA,aAAa,CAAGjB,WAAW,CAAC,CAChCkB,IAAI,CAAE,SAD0B,CAEhCC,YAAY,CAAET,mBAFkB,CAGhCU,QAAQ,CAAE,CACR;AADQ,CAHsB,CAMhCC,aAAa,CAAE,uBAACC,OAAD,CAAa,CAC1B;AACAA,OAAO,CAACC,OAAR,CAAgBpB,WAAW,CAACqB,SAA5B,CAAuC,SAACR,KAAD,CAAQS,MAAR,CAAmB,CACxD;AACA;AACAT,KAAK,CAACL,UAAN,CAAmBc,MAAM,CAACC,OAA1B,CACAV,KAAK,CAACJ,SAAN,CAAkB,IAAlB,CACA;AACD,CAND,EAQCW,OARD,CAQSpB,WAAW,CAACwB,OARrB,CAQ8B,SAACX,KAAD,CAAW,CACvCD,YAAY,CAACC,KAAD,CAAZ,CAGD,CAZD,EAaCO,OAbD,CAaSpB,WAAW,CAACyB,QAbrB,CAa+B,SAACZ,KAAD,CAAQS,MAAR,CAAmB,CAChDT,KAAK,CAACH,KAAN,CAAcY,MAAM,CAACZ,KAAP,CAAagB,OAA3B,CACA;AACD,CAhBD,EAiBD,CAzB+B,CAAD,CAAjC,CAgCE,cAAeZ,CAAAA,aAAa,CAACa,OAA7B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport Axios from \"axios\";\r\nimport { ICatagory } from \"../api/interface/iCatalog\";\r\n\r\nexport const getCatalogs = createAsyncThunk(\r\n    \"catalog/getCatalogs\",\r\n    async (dispatch, getState) => {\r\n        const { data } = await Axios.get(\"api/CatalogApi\");\r\n        console.log(data['catagories'])\r\n      return data['Categories']\r\n    }\r\n);\r\n\r\ninterface CatalogState {    \r\n  catagories: ICatagory[]   \r\n  isLoading: boolean\r\n  error:  string|undefined\r\n}\r\n\r\nconst catalogInitialState: CatalogState = {    \r\n  catagories: [],    \r\n  isLoading: false,\r\n  error: undefined\r\n}\r\n\r\nfunction startLoading(state: CatalogState) {\r\n  state.isLoading = true\r\n}\r\n\r\n\r\n\r\nconst catalogsSlice = createSlice({\r\n  name: 'catalog',\r\n  initialState: catalogInitialState,\r\n  reducers: {\r\n    // standard reducer logic, with auto-generated action types per reducer\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Add reducers for additional action types here, and handle loading state as needed\r\n    builder.addCase(getCatalogs.fulfilled, (state, action) => {\r\n      // Add user to the state array\r\n      // state.isLoading = false\r\n      state.catagories = action.payload\r\n      state.isLoading = true\r\n      //state.catagories = new string[2]{'dsdsd','sdsdsd'};\r\n    })\r\n    \r\n    .addCase(getCatalogs.pending, (state) => {\r\n      startLoading(state)\r\n      \r\n    \r\n    })\r\n    .addCase(getCatalogs.rejected, (state, action) => {\r\n      state.error = action.error.message\r\n      //loadingFailed(state, action)\r\n    })\r\n  },\r\n})\r\n  \r\n \r\n  \r\n \r\n  \r\n  export default catalogsSlice.reducer;"]},"metadata":{},"sourceType":"module"}